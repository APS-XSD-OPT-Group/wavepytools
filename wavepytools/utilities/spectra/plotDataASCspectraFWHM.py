#!/usr/bin/env python

# -*- coding: utf-8 -*-  #
"""
Created on Thu Nov 27 2014 14:44

@author: wcgrizolli

Plot Graphs 2D z vs x,y from ascii files generated by spectra

Use this as template to new plots

"""

from __future__ import print_function

import matplotlib.pyplot as plt
import numpy as np
from wavepy.utils import easyqt
from cycler import cycler
import os


import sys

from wavepy.utils import _fwhm_xy

plt.rc('axes', prop_cycle=(cycler('linestyle', ['-', '--', '-.', ':']) *
                           cycler('color', ['k', 'r', 'g', 'b', 'm', 'c'])))


# %% Select data File

if len(sys.argv) != 1:
    listFiles = sys.argv[1:]

else:
    listFiles = easyqt.get_file_names("File name with Data")

figname = listFiles[0].rsplit('/', 1)[1].rsplit('.', 1)[0]

f = open(listFiles[0], 'r')
text = f.readlines()[0:11]
f.close()

print('### FILE HEADER')
for item in text:
    print('###' + item[:-1])


# %% Select which collum to plot

quantity = text[8].split()
units = text[9].split()




doFWHM = True  # easyqt.get_yes_or_no(message="Calculate FWHM?", title="Question")


# choices = easyqt.get_list_of_choices('Choose X and Y axes', choices=quantity)
colX = 0  # quantity.index(choices[0])
colY = 1  # quantity.index(choices[1])

# %% Pre Plot

plt.figure(figsize=(8, 6))
plt.grid(True)
plt.xlabel(quantity[colX] + ' [' + units[colX] + ']')
plt.ylabel(quantity[colY] + ' [' + units[colY] + ']')
#plt.ylabel('Cumulative flux [ph/s]')


# %% Loop in the filelist

label = []
maxValAll = 0.0
xfwhm_list = []
yfwhm_list = []

#
def _func(ydata):
    return np.cumsum(ydata/np.max(ydata))/np.sum(ydata/np.max(ydata))

#
#def _func(ydata):
#    return ydata/np.max(ydata)


for filenameToPlot in listFiles:

    data = np.genfromtxt(filenameToPlot, skip_header=10, comments='#')

    plt.plot(data[:, colX], _func(data[:, colY]), lw=2)

    label.append(filenameToPlot.split('/')[-1])  # Filename as label

    xfwhm, yfwhm = _fwhm_xy(data[:, colX], _func(data[:, colY]))
    xfwhm_list.append(xfwhm)
    yfwhm_list.append(yfwhm)

#plt.xlim([20000, 30000])

title4graphs = "Plot Data From SPECTRA\n" + filenameToPlot.split('/')[-1].split('.')[0]
plt.title(title4graphs)
plt.legend(label, title='K values', loc=0, shadow=True, fontsize='small')


# %% if you have a scan file you may want to use that file to make correct legend


scanFile = filenameToPlot.rsplit('/', 1)[0] + '.hdr'

if os.path.isfile(scanFile):

    scanFileText = open(scanFile).read().splitlines()

    for nline, line in enumerate(scanFileText):

        if 'ScanItem' in line:
            scanitem = line.split('\t')[1]

        if 'FILES' in line:
            n_start_list = nline + 1
            break

    list_scan_values = []
    for line in scanFileText[n_start_list:]:
        if line is '':
            break

        list_scan_values.append(line.split('\t:\t'))

    for value, fname in list_scan_values:
        label[label.index(fname + '.dc0')] = value

    plt.legend(label, title=scanitem, loc=0, shadow=True, fontsize='small')


# %% calculate and plot FWHM of graphs


if doFWHM:

    fwhm = []
    for xfwhm, yfwhm in zip(xfwhm_list, yfwhm_list):

        plt.plot(xfwhm, yfwhm, 'r|--', lw=2, ms=20, mew=3)

        fwhm.append(xfwhm[1] - xfwhm[0])

    fwhm = np.array(fwhm)

plt.show(block=False)
plt.savefig(figname + '_1.png')


# %%


if doFWHM:

    try:
        xdata = np.asarray(label).astype(float)
    except:
        xdata = np.asarray([x for x in range(len(label))])

    ydata = fwhm

    ydata = ydata[xdata.argsort()]
    xdata.sort()

    plt.figure()
    plt.plot(xdata, ydata/11000*100, '-o')

    if os.path.isfile(scanFile):
        plt.xlabel(scanitem)
    else:

        plt.xlabel('File name')

        plt.xticks(xdata, label, rotation=17)

    #    plt.ylabel('FWHM' + ' [' + units[colX] + ']')
    plt.ylabel(r'$\Delta E / E \times 100$ ')
    plt.grid()
    plt.title(title4graphs)
    plt.savefig(figname + '_2.png')
    plt.show(block=True)
