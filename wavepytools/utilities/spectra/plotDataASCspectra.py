#!/usr/bin/env python

# -*- coding: utf-8 -*-  #
"""
Created on Thu Nov 27 2014 14:44

@author: wcgrizolli

Plot Graphs 2D z vs x,y from ascii files generated by spectra

Use this as template to new plots

"""

from __future__ import print_function

import matplotlib.pyplot as plt
import numpy as np

from wavepy.utils import easyqt

from cycler import cycler
import os

import os

import sys

from wavepy.utils import _fwhm_xy

plt.rc('axes', prop_cycle=(cycler('linestyle', ['-', '--', '-.', ':']) *
                           cycler('color', ['k', 'r', 'g', 'b', 'm', 'c'])))
plt.rc('axes', prop_cycle=(cycler('linestyle', ['-', '--', '-.', ':']) *
                           cycler('color', ['k', 'r', 'g', 'b', 'm', 'c'])))

# %% Select data File

if len(sys.argv) != 1:
    listFiles = sys.argv[1:]

else:
    listFiles = easyqt.get_file_names("File name with Data")

#listFiles.sort()
figname = listFiles[0].rsplit('/', 1)[1].rsplit('.', 1)[0]


f = open(listFiles[0], 'r')
text = f.readlines()[0:11]
f.close()

print('### FILE HEADER')
for item in text: print('###' + item[:-1])



quantity = text[8].split()
units = text[9].split()


choices = easyqt.get_list_of_choices('Choose X and Y axes', choices=quantity)

colX = quantity.index(choices[0])
colY = quantity.index(choices[1])

# %% Pre Plot

plt.figure(figsize=(8, 6))
plt.grid(True)
plt.xlabel(quantity[colX] + ' [' + units[colX] + ']' )
plt.ylabel(quantity[colY] + ' [' + units[colY] + ']')


# %% Loop in the filelist

label = []
maxValAll = 0.0
xfwhm_list = []
yfwhm_list = []

for filenameToPlot in listFiles:

    data = None
    data = np.genfromtxt(filenameToPlot, skip_header= 10, comments='#')

    plt.plot(data[:,colX], data[:,colY], lw=2)



    label.append(filenameToPlot.split('/')[-1])  # Filename as label




title4graphs = "Plot Data From SPECTRA\n" + filenameToPlot.split('/')[-1].split('.')[0]
plt.title(title4graphs)
plt.legend(label, title='K values', loc=0, shadow=True, fontsize='small')


# %% if you have a scan file you may want to use that file to make correct legend


scanFile = filenameToPlot.rsplit('/', 1)[0] + '.hdr'

if os.path.isfile(scanFile):

    scanFileText = open(scanFile).read().splitlines()

    for nline, line in enumerate(scanFileText):

        if 'ScanItem' in line:
            scanitem = line.split('\t')[1]


        if 'FILES' in line:
            n_start_list = nline + 1
            break

    list_scan_values = []
    for line in scanFileText[n_start_list:]:
        if line is '':
            break

        list_scan_values.append(line.split('\t:\t'))

    for value, fname in  list_scan_values:
        label[label.index(fname + '.dc0')] = value


    plt.legend(label, title=scanitem, loc=0, shadow=True, fontsize='small')





plt.savefig(figname + '_1.png')

